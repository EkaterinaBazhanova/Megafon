Курсовой проект от Мегафон

Задача: построить алгоритм, который для каждой пары пользователь-услуга определит вероятность подключения услуги.

Метрика: sklearn.metrics.f1_score(…, average=’macro’)

Исходные данные:

1) data_train.csv: id, vas_id, buy_time, target

2) features.csv.zip: id, feature_list

3) data_test.csv: id, vas_id, buy_time

Форма представления результатов:

1) файл course_project.ipynb -- jupyter-ноутбук с кодом модели.

2) файл final_model.pkl -- модель в формате pickle.

3) файл predict_test.py -- питоновский файл с кодом (принимает файлы data_test.csv и features.csv из корневой папки и записывает в эту же папку файл answers_test.csv).

4) файл answers_test.csv -- файл с предсказаниями вероятности классов для данных из data_test.csv.

5) файл answers_test_class.csv -- файл с предсказаниями классов для данных из data_test.csv.

6) файл vas_id_recommended.csv -- файл с рекомендациями услуг абенентам из data_test.csv.

7) файл course_presentation.pdf -- презентация в формате pdf (информация о модели, ее параметрах, особенностях и основных результатах; обоснование выбора модели и ее сравнение с альтернативами; принцип составления индивидуальных предложений для выбранных абонентов).

Обработка датасетов: 

1) data_train/data_test: преобразование временного признака в формате timestamp, выделение из него новых признаков (год, месяц, день);

2) features: определение типов признаков, удаление константных признаков;

3) соединение data_train/data_test с features.csv с использованием merge_asof(..., direction='nearest')

4) отбор признаков: удаление категориальных признаков, а также признаков, не полезных для обучения; отбор топ-126 признаков

Используемая модель: LGBMClassifier(random_state=21, 
                            class_weight='balanced',
                            objective='binary',
                            max_depth=10,
                            n_estimators=1000,
                            num_leaves=40,
                            reg_lambda=0.5)

Оптимальный порог вероятности для определения класса: 0.8

Результат модели на data_train.csv: на трейне -- 0.8260610804103954, на валидации -- 0.7522575067938254